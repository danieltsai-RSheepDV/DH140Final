[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "stmblog",
    "section": "",
    "text": "Indie Vs Triple A\n\n\n\n\n\nIs Indie better than Triple A? How do they stack up when considering real Steam reviews?\n\n\n\n\n\nAug 2, 2024\n\n\nDaniel (Yun) Tsai\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/SteamAnalysis.html",
    "href": "posts/SteamAnalysis.html",
    "title": "Indie Vs Triple A",
    "section": "",
    "text": "The gaming industry has seen a shift in recent years, that being the rise of independent developers. In the early 2000s, the idea that indie games could be anything close to good was a pipe-dream. The general consensus was that only triple A studios had the expertise and budget to make a “real” video game. However, in 2008, the indie game Braid was released, revealing to the world that there is potential for the independent creator to make an indie game worthy of critical acclaim. Since then, there has been a significant shift in player sentiment as indie games have legitimized their place in their genre and a growing disdain toward triple A studios due to the over-commercialization of games. Thus, my project aims to study the shifts in player sentiment over the past few years to see if these trends are backed by data from the popular game distribution platform Steam. This project aims to answer the following questions:\n\nHas views on indie games become more positive over time?\nHas views on triple A games become more negative over time?\nHave indie games surpassed triple A games in player sentiment?\n\nNote: - The use of the word “popularity” is solely used to describe the number of players who engage with a game, and is not necessarily tied to sentiment. A game described as popular in this project can still have a bad sentiment if its a bad game that a lot of people played. - Whenever the project mentions saving a file, this file in question is not included in the repository. Saving refers to the fact that when you run the project on your local machine, it will generated a saved data file so that you (the user) don’t have to run any processing steps twice. This does mean however that if you wish to run the code yourself, you will have to all run preprocessing steps at least once, which will take a significant amount of time.\n\n\nThe data I’ll be using is comprised of two datasets, the 100 Million+ Steam Reviews dataset by KieranPO’C and the Steam Games Dataset by Martin Bustos. Due to the sheer size of these two datasets (thus making them unavailable in this Github repo) and the inability to direct download the files (Kaggle has download restrictions), you will need a Kaggle account to download the datasets yourself if you wish to run this code on your own machine. Insert the games.json file from the Steam Games Dataset and the all_reviews.csv file from the 100 Million+ Steam Reviews dataset into the data folder of this project, then the following code will be able to run.\nWarning: Due to the sheer size of the datasets the code will take a while to run depending on your computer’s specs. Running the preprocessing steps will take a significant amount of computation power. If you are using an online service be cognizant that running this may rack up costs very quickly. It is highly recommended to run this locally. The average run time of the preprocessing steps on my machine was around 10-15 minutes (the combined datasets are around 41GB in size). Once that step is over everything else is relatively quick, so only run the preprocessing step once.\n\n# ============\n# Pre-processing code. Reads the two datasets, then joins them into one.\n# ============\n\nimport pandas as pd\nfrom pathlib import Path\n\nmy_file = Path(\"Data/data.pkl\")\nif my_file.is_file():\n    dataset = pd.read_pickle(\"Data/data.pkl\")\nelse:\n    # Steam Games Dataset\n    game_info_dataset = pd.read_json(\"data/games.json\")\n    game_info_dataset = game_info_dataset.transpose()\n    # 100 Million+ Steam Reviews\n    game_review_dataset = pd.read_csv(\"Data/all_reviews.csv\")\n    \n    dataset = pd.merge(game_info_dataset, game_review_dataset, left_on='name', right_on='game') # INNER JOIN between databases based on game name\n    \n    # Dropping all irrelevant attributes\n    dataset = dataset.drop(\n        [\"app_name\", \"median_playtime_forever\", \"median_playtime_2weeks\", \"average_playtime_2weeks\", \n         \"header_image\", \"peak_ccu\", \"app_id\", \"dlc_count\", \"reviews\", \"support_url\", \"support_email\", \n         \"website\", \"windows\", \"mac\", \"linux\", \"metacritic_score\", \"metacritic_url\", \"achievements\",\n         \"recommendations\", \"notes\", \"supported_languages\", \"full_audio_languages\", \"packages\", \"developers\",\n         \"publishers\", \"categories\", \"screenshots\", \"movies\", \"user_score\", \"score_rank\", \"appid\", \"author_steamid\", \n         \"author_num_games_owned\", \"author_num_reviews\", \"author_playtime_forever\", \"author_playtime_last_two_weeks\", \n         \"author_playtime_at_review\", \"author_last_played\", \"votes_up\", \"votes_funny\", \"weighted_vote_score\", \"comment_count\",\n         \"steam_purchase\", \"received_for_free\", \"written_during_early_access\", \"hidden_in_steam_china\", \"steam_china_location\",\n         \"recommendationid\", \"timestamp_updated\"\n        ]\n        , axis=1, errors='ignore')\n    # Reformatting release date into a workable format\n    dataset[\"release_date\"] = pd.to_datetime(dataset[\"release_date\"], format='mixed')\n    dataset['release_year'] = dataset['release_date'].dt.year\n    dataset['release_month'] = dataset['release_date'].dt.month\n    dataset.to_pickle(\"Data/data.pkl\")\n\n# Seperation of dataset into Indie games and Triple A games\nindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" in x) | dataset.tags.map(lambda x : \"Indie\" in dict(x).keys())]\nnonindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" not in x) & dataset.tags.map(lambda x : \"Indie\" not in dict(x).keys())]\n\n\nindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n0\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nGalactic Bowling (aka Alien Monster Bowling Le...\n1673193813\n1\n2008\n10\n\n\n1\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nI bought this game despite all its flaws to pl...\n1643722668\n0\n2008\n10\n\n\n2\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nFun Game\n1499517402\n1\n2008\n10\n\n\n3\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\ngerman\nEndlich mal wieder ein Bowling Spiel Abwechslu...\n1469980241\n1\n2008\n10\n\n\n4\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nMenu screen works fine. The game itself, howev...\n1451162716\n0\n2008\n10\n\n\n\n\n\n\n\n\nnonindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n141\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nFun game but with a bit of pay to win\n1698161278\n1\n2021\n2\n\n\n142\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nspanish\nExcelentes recuerdos de cuando lo jugaba en fa...\n1698100567\n1\n2021\n2\n\n\n143\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nIs antistres, and the best game of all!\n1697979320\n1\n2021\n2\n\n\n144\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nturkish\nLoc'un ilk çıkmış hali gibi, ama yenilikler ge...\n1697575093\n1\n2021\n2\n\n\n145\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\na blast from the past 9 years ago to be exact\n1697283258\n1\n2021\n2\n\n\n\n\n\n\n\n\n\n\n\n\nThis dataset consists of a myriad of information to related to large selection of games that were on the Steam at the time the dataset was created (8 months prior to the creation of this project). The information important to this study is the general information related to the games listed, i.e. the name of the game, when it was published, and the estimated number of users that own the game. This data is used to place the games in chronological order and obtain descriptors of the game required for comparison (i.e. genre).\n\n\n\nThis dataset as opposed to the previous one is an extremely large dataset that contains information of a significant portion of reviews on any game posted on the Steam store, last updated 7 months prior to the creation of this project. The attributes important to this study are the games each review is related to, whether the user marked the review as positive or negative, and the actual content of the review.\nThese two datasets were merged together into a single, workable pandas DataFrame along with removing a lot of the extraneous data not relevant to this study (i.e. the frankly unusable metacritic reviews). It was then split again to separate out Indie games and Non-Indie games, Non-Indie being a good enough assumption for all the triple A games on the platform.\n\n\n\n\n\n\n\nBefore I dive into sentiment analysis, I want to identify a few confounding variables that may affect the rating of games independent of the game’s quality. The goal of this project is not to comment on the changing economics of the gaming industry nor the issues with over-saturation of indie games, however these two factors will be mentioned and (as the following sections shows) explored such that they can be accounted for. The information discovered here will later be used to back up the sentiment analysis required to answer the topic of this projects.\n\n\nHere I wanted to see whether there was a significant difference between the number of indie games versus triple A games, and how their numbers have changed over time. The idea is to group the games from each category by month and year, and see the trend in the number of indie games verses triple A games released that month.\n\nimport matplotlib.pyplot as plt\n\n\n```{r}\n#| code-fold: show\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get counts of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\nindie_counts = indie_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\nnonindie_counts = nonindie_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_counts.plot(kind='bar', figsize=(15,5), label=\"Indie\")\nnonindie_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5)\nax.set_ylim(0, 800)\nplt.legend()\nplt.title(\"# of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nUnexpectedly, there is a very clear starting point when the number of games started growing significantly, around 2014 and possibly a year or two earlier. This may be, however, simply the natural growth of the platform. The raw number of indie games will inevitably be larger than triple A due to the larger number of independent developers. However, one notable pattern is the sudden jump in the middle of 2017 for indie games. This jump coincides with the new Steam Direct model that allowed any game to be published on the platform as long as the right documentation was files. This change didn’t affect triple A games significantly however as the data proves, it allowed for a much larger number of indie developers to publish games on the platform. More information on that can be found here.\nOne issue I want to be mindful of is that a majority of indie games aren’t going to be played (most lack the resources to properly market a game). These games won’t have a significant impact on the gaming community as a whole, thus I want to filter them out to focus on games that have the potential to cause significant shifts in the gaming community. However I’ll occasionally bring them back to see if there are trends in terms of what games are being made.\nBelow is a graph is the same as above except filtered for games with at least 20000 players (estimated).\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get counts of indie games released each month, filtering for popular games\nindie_filtered = indie_dataset.drop_duplicates(\"name\")\nindie_popular = indie_filtered[indie_filtered['estimated_owners'] != \"0 - 20000\"]\nindie_popular = indie_popular[indie_popular['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_popular.release_date.dt.to_period('M')\nindie_pop_counts = indie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_filtered = nonindie_dataset.drop_duplicates(\"name\")\nnonindie_popular = nonindie_filtered[nonindie_filtered['estimated_owners'] != \"0 - 20000\"]\nnonindie_popular = nonindie_popular[nonindie_popular['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_popular.release_date.dt.to_period('M')\nnonindie_pop_counts = nonindie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_pop_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_pop_counts.plot(kind='bar', figsize=(15,5), label=\"Indie\")\nnonindie_pop_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5)\nax.set_ylim(0, 800)\nplt.legend()\nplt.title(\"# of Popular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nAn alternate version that shows the “unplayed” games below the x-axis.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n\nindie_filtered = indie_dataset.drop_duplicates(\"name\")\n\n# Get counts of indie games released each month, filtering for popular games\nindie_popular = indie_filtered[indie_filtered['estimated_owners'] != \"0 - 20000\"]\nindie_popular = indie_popular[indie_popular['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_popular.release_date.dt.to_period('M')\nindie_pop_counts = indie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of indie games released each month, filtering for unpopular games\nindie_unpopular = indie_filtered[indie_filtered['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_unpop_months = indie_unpopular.release_date.dt.to_period('M')\nindie_unpop_counts = indie_unpop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\nindie_unpop_counts *= -1\n\n\nnonindie_filtered = nonindie_dataset.drop_duplicates(\"name\")\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_popular = nonindie_filtered[nonindie_filtered['estimated_owners'] != \"0 - 20000\"]\nnonindie_popular = nonindie_popular[nonindie_popular['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_popular.release_date.dt.to_period('M')\nnonindie_pop_counts = nonindie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_unpopular = nonindie_filtered[nonindie_filtered['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_unpop_months = nonindie_unpopular.release_date.dt.to_period('M')\nnonindie_unpop_counts = nonindie_unpop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\nnonindie_unpop_counts *= -1\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_pop_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_pop_counts.plot(kind='bar', figsize=(15,10), label=\"Indie\")\nnonindie_pop_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nindie_unpop_counts.plot(kind='bar', ax=ax, color='C0', label=\"_nolegend_\")\nnonindie_unpop_counts.plot(kind='bar', ax=ax, color='C1', label=\"_nolegend_\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5);\nplt.axhline(y=0, color='black', linewidth=0.5)\nax.set_ylim(-800, 800)\nax.yaxis.set_major_formatter(lambda x, pos: f'{abs(x):g}')\nplt.legend()\nplt.title(\"# of Indie vs Non-Indie games released per month, seperated by popularity\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nThe second graph is the one that is more interesting. While popular indie games are still greater in number, their fluctuations in growth are no different than the popular triple A games. In contrast, unpopular/unknown games tell a different story. The number of unpopular triple A games tend to wax and wane at the same rate that unpopular indie games do, however the quantity of unpopular indie games vastly out number of unpopular triple A games. There is also an obvious point where the chasm between unpopular triple A and indie grew, the same mid-2017 date we observed before. We can see clearly now that the sudden jump of the number of indie games we observed in the first graph went mostly into the amount of unpopular indie games on the platform, with none of it contributing to the number of popular indie games.\nAnother point of interest is the convergence of the number of popular indie and triple A games starting from 2021 to now. Based on my knowledge of the general gaming sphere, this trend is likely due to the increase in high effort indie titles over the past few years. With smash-hit titles like Hollow Knight raising the bar for indie games mixed with the over-saturation in the indie scene, its reasonable to assume that gamers have gotten more picky about the indie titles they’re willing to play while in tandum serious indie developers are focusing a lot more on quality now than quantity\n\n\n\nWhen going through the reasons why or why not people will buy or like a game, cost unsurprisingly is a pretty major factor. There is a lot of discourse surrounding the rising costs of triple A titles, going from a 50 dollars standard to 60, and now major companies are again raising the baseline to 70. As costs of gaming as a hobby rise, I want to see if this is a general trend in gaming as a whole, or whether this is something exclusive to triple A games.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nSurprisingly the mean cost of games hasn’t fluctuated much over time. The game prior to 2006 seem to fluctuate a lot more in pricing, but that is due to the fact that theres not much data for that period of time. Overall though this data doesn’t make much sense considering the trends in game pricing as reported by major studios. The most apparent trend though is that indie games typically cost less than triple A games, an unsurprisingly fact.\nA major factor that may be skewing this data is the fact that along with the rising prices of triple A games, there has also been a rise in the number of free to play games. These games make a majority of their money from in game purchases, as such their profits won’t really be revealed in this graph. To account for this, lets graph the data again, this time removing all free games.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months = indie_months[indie_months['price'] != 0]\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months = nonindie_months[nonindie_months['price'] != 0]\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5))\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Indie vs Non-Indie games released per month, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nSurprisingly again, not much change. One last filter, only considering games with a significant player base.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month, filtering for popular games\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months = indie_months[indie_months['estimated_owners'] != \"0 - 20000\"]\nindie_months = indie_months[indie_months['estimated_owners'] != \"0 - 0\"]\nindie_months = indie_months[indie_months['price'] != 0]\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month, filtering for popular games\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months = nonindie_months[nonindie_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_months = nonindie_months[nonindie_months['estimated_owners'] != \"0 - 0\"]\nnonindie_months = nonindie_months[nonindie_months['price'] != 0]\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5))\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Popular Indie vs Non-Indie games released per month, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nThe expected pattern now emerges, the prices of triple A games rising over time while indie games have stayed relatively the same. When smoothed out to average price per year rather than month.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_years = dataset.drop_duplicates(\"name\").release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_years.min(), end=dataset_years.max(), freq='Y')\n\n# Get average cost of indie games released each year\nindie_years = indie_dataset.drop_duplicates(\"name\").copy()\nindie_years = indie_years[indie_years['estimated_owners'] != \"0 - 20000\"]\nindie_years = indie_years[indie_years['estimated_owners'] != \"0 - 0\"]\nindie_years = indie_years[indie_years['price'] != 0]\nindie_years[\"release_date\"] = indie_years[\"release_date\"].dt.to_period('Y')\nindie_prices = indie_years[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each year\nnonindie_years = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_years = nonindie_years[nonindie_years['estimated_owners'] != \"0 - 20000\"]\nnonindie_years = nonindie_years[nonindie_years['estimated_owners'] != \"0 - 0\"]\nnonindie_years = nonindie_years[nonindie_years['price'] != 0]\nnonindie_years[\"release_date\"] = nonindie_years[\"release_date\"].dt.to_period('Y')\nnonindie_prices = nonindie_years[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(kind='line', figsize=(15,5))\nnonindie_prices.plot(kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Popular Indie vs Non-Indie games released per year, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nThe divergence in prices is now very apparent. While indie games haven’t changed much in price, going from slightly below 10 dollars to slightly above, triple A games has been growing substantially. With a staring average cost of 10 dollars, the cost has grown to over double of that, ending at around 25 dollars. It confirms that yes, for the games that most player are playing, the average cost of triple A games has been growing over time. It is very likely that this trend will strong influence the general sentiment of a game (an average game could be interpreted as bad if its overpriced), thus this is an important trend to note going into review sentiment analysis.\n\n\n\n\nOverall two things can be concluded.\nFirst, the quantity of indie games significantly outweighs the number of triple A games on Steam, while also having a very heavy slant toward unpopular games. Keeping this in mind while doing sentiment analysis is extremely important, for the overabundance little known indie Steam games may significantly skew the end results of the sentiment analysis. A majority of these unpopular games are best described as “student projects”, inherently lacking in quality and therefore attracting only a couple reviews that are more likely than not to be negative. Filtering by popularity seems to be the best way to mitigate the imbalance in popularity, though this filtering should be noted when evaluating the results.\nSecond, overall changes in the cost in triple-A games has been rising steadily over time at a significant rate. There is a high chance that price will become more and more of a reason behind negative reviews for triple-A games, thus it’ll be something to look out for if a strong downward trend in triple-A game sentiment is revealed.\n\n\n\nAn important note, while yes Steam gives average user ratings on their Steam page and totals the number of positive vs. negative reviews, reviews tend do have a lot more nuance then a binary recommend/not recommend. Some reviewers may be extremely mixed about a game but still slightly lean toward not, and vice versa. Hence sentiment analysis will be used to identify these nuances and get a better measure of how players feel about a game.\n\n\nThe below code takes in the dataset and preforms a sentiment analysis on the text of each review, then separates the dataset into indie games and non-indie games. Warning: Due to the sheer number of reviews in the data set (around 50 million after filtering), the following code takes a very long time to run. It took me around 8 hours to finish running the code (with a very well spec’d PC), even with swifter optimization (automatic vectorization, multithreading, etc.). The data processed is saved as a file so that the sentiment analysis doesn’t have to be run multiple times, however be prepared for this section to take a while.\n\nimport matplotlib.pyplot as plt\nimport nltk\n\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment import vader\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import opinion_lexicon\nfrom nltk.stem.porter import PorterStemmer\n\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('vader_lexicon')\nnltk.download('opinion_lexicon')\n\n[nltk_data] Downloading package punkt to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n[nltk_data] Downloading package opinion_lexicon to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package opinion_lexicon is already up-to-date!\n\n\nTrue\n\n\n\nimport swifter\nimport tqdm as notebook_tqdm\n\n\nmy_file = Path(\"Data/sentiment.pkl\")\nif my_file.is_file():\n    sentiment_data = pd.read_pickle(\"Data/sentiment.pkl\")\nelse:\n    # Init sentiment analyzer\n    \n    engStopwords = stopwords.words('english')\n    sentimentAnalyzer = vader.SentimentIntensityAnalyzer()\n    \n    # Filter dataset for just reviews\n    \n    review_dataset = dataset[dataset[\"language\"] == \"english\"]\n    review_dataset = review_dataset[[\"game\", \"release_date\", \"review\"]]\n    \n    # Function that returns the sentiment score of a review\n    \n    def getSentiment(row):\n        try:\n            words = word_tokenize(row[\"review\"])\n        except Exception as e:\n            return pd.NA\n        score = 0\n        for w in words:\n            score += sentimentAnalyzer.polarity_scores(w)['compound']\n        return score\n    \n    # Generate sentiment scores for all the reviews in the dataset\n    # WARNING: THIS CODE TAKES AROUND 8 HOURS TO RUN\n    \n    sentiment_data = review_dataset.swifter.apply(getSentiment, axis=1)\n    \n    sentiment_data = pd.to_numeric(sentiment_data)\n    sentiment_data.to_pickle(\"Data/sentiment.pkl\")\n\n# Add sentiment data to dataset\nreview_dataset = dataset[dataset[\"language\"] == \"english\"].copy()\nreview_dataset[\"sentiment\"] = sentiment_data\n\n# Split into indie and non-indie\nreview_indie_dataset = review_dataset[review_dataset.genres.map(lambda x : \"Indie\" in x) | review_dataset.tags.map(lambda x : \"Indie\" in dict(x).keys())]\nreview_nonindie_dataset = review_dataset[review_dataset.genres.map(lambda x : \"Indie\" not in x) & review_dataset.tags.map(lambda x : \"Indie\" not in dict(x).keys())]\n\nC:\\Users\\RSheep\\.conda\\envs\\dh140\\Lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\nreview_nonindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\n...\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\nsentiment\n\n\n\n\n141\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nFun game but with a bit of pay to win\n1698161278\n1\n2021\n2\n0.9938\n\n\n143\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nIs antistres, and the best game of all!\n1697979320\n1\n2021\n2\n0.6369\n\n\n145\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\na blast from the past 9 years ago to be exact\n1697283258\n1\n2021\n2\n0.0000\n\n\n146\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nPay to win slow load..trash game\n1695433549\n0\n2021\n2\n0.4832\n\n\n151\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nI live this game\n1692061364\n1\n2021\n2\n0.0000\n\n\n\n\n5 rows × 21 columns\n\n\n\n\n\n\n\n\n\n\nThis section will be dedicated to analyzing the changes in sentiment over time with respect to the games that were released per month. The same techniques used to analyze the quantity of games released per month will be used here to analyze and account for game popularity and the quantity of games when doing sentiment analysis.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = review_indie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_months = review_nonindie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_months = review_indie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_months = review_nonindie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 20000\"]\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Popular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 20000\"]\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Popular Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Unpopular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Unpopular Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\nExamining general game sentiment over time it seems that there is not only no difference between the sentiment scores of Indie vs. Triple A games, but also no major fluctuation of sentiment scores over time either. This holds true even if the data is filtered for popular games (games with &gt;20000 owners) and unpopular games. The data shows that time and popularity have no overall impact on the sentiment scores of games.\nThus to answer the questions at the beginning of the project, no, sentiment toward both indie games and triple A games have not changed over time, and as a result indie games have not surpassed triple A games in player sentiment.\nDiscussion on why this might be the case will be expanded upon in the discussion sections.\n\n\n\nWhile time itself may not have affected sentiments, what about when its separated by costs?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'] == 0]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'] == 0]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, $0\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(0, 10, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(0, 10, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$0-\\$10\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(10, 30, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(10, 30, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$10-\\$30\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(30, 60, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(30, 60, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$30-\\$60\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'] &gt; 60]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'] &gt; 60]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, &gt;$60\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\nThe data again reveals that there isn’t a major difference between player sentiment when comparing Indie vs Non-Indie games, nor has sentiment changed over time. One interesting aspect to note however is the fact that around the \\$30 to \\$60 range is when sentiment over games starts to become highly variable, with indie games having a much higher sentiment variability than Non-Indie games do. There are various reasons that this could be the case, which will be discussed in the discussion section.\n\n\n\n\nAs shown by the sentiment analysis graphs, sentiment toward both indie games and triple-A games do not differ arguably at all. No matter how you slice it, the data always reveals that games of both categories have the same average sentiment, whether you look at high cost games, low cost games, popular or not. It is strong evidence that despite how much emphasis is put on the divide between “Indie” vs “Triple-A” games, when it comes down to it the distinction is not an important contributing factor to average player sentiment. There could be multiple reasons why this could be the case.\nOne theory is that people genuinely do not care about whether the game is indie or not, for other factors influence their sentiment to a greater degree than how many people made the game they’re playing. Such a theory would make sense, why would a good game be any better if one person made it versus 100 people? Would a bad game be alright if a single person made it? Players will inevitably focus more on the gameplay, art, music, etc. of a game, thus knowing it was made by a large or small team won’t override their perception of the game.\nAnother theory is that the opposing views may just cancel each other out. It is undeniable that some people are willing to cut indie games more slack when it comes to bugs and quality issues as they are aware that the lack of resources will inherently lead to more mistakes slipping through the cracks. On the side of the argument, there are also players out there that view indie games as inherently lesser than anything triple A can create. Indie developers simply won’t have the resources, so it’ll inherently lack the high fidelity graphics and realism that some communities believe is a must have. Theses opposing view may cancel each other out, leading to a middling sentiment when reviews are considered as a whole. A piece of evidence that backs this viewpoint up is the 30 dollar to 60 dollar sentiment graph. Its not surprising to learn that the most expensive something is, the stronger opinions people will have about it to either justify their purchase or express anger over being ripped off. What is interesting is how much more variability indie games have compared the their triple-A counterparts. Typically the 30 dollar to 60 dollar range is where most gamers will deem a game to be asking for a premium price, not overly expensive but also pricey enough where they expect a certain degree of quality. Its a mindset carried over from the pricing structure of console games, who have a fixed $60 price tag (as of now) for all first-party games. Thus, going with the opposing views theory, the higher variability may indicate the point where the excuse “well its just an indie game” for mediocre no longer holds due to the high asking price. Thus, it divides indie games into two camps, games that are deemed worthy of price and games that are absolutely not. Confirmation bias then kicks in when reviewers consider the fact that the game is an indie game, i.e. “This game is so good, and its made by one person. Of course its worth purchasing” or “This game is terrible, its made by a single greedy dev who wants to steal your money.”\nThe overall takeaway from this project though is that despite countless buzzwords about indie vs triple A in the gaming community, there really isn’t any general statement to be made about the quality of “indie games as a whole” or “triple A games as a whole”. The games within each category vary too significantly to make a blanket statement the category as a whole. Thus going forward, its best to be cautious of any source that claims anything about either category as a whole, as what they say may sat more about them than the games they’re talking about."
  },
  {
    "objectID": "posts/SteamAnalysis.html#introduction",
    "href": "posts/SteamAnalysis.html#introduction",
    "title": "Indie Vs Triple A",
    "section": "",
    "text": "The gaming industry has seen a shift in recent years, that being the rise of independent developers. In the early 2000s, the idea that indie games could be anything close to good was a pipe-dream. The general consensus was that only triple A studios had the expertise and budget to make a “real” video game. However, in 2008, the indie game Braid was released, revealing to the world that there is potential for the independent creator to make an indie game worthy of critical acclaim. Since then, there has been a significant shift in player sentiment as indie games have legitimized their place in their genre and a growing disdain toward triple A studios due to the over-commercialization of games. Thus, my project aims to study the shifts in player sentiment over the past few years to see if these trends are backed by data from the popular game distribution platform Steam. This project aims to answer the following questions:\n\nHas views on indie games become more positive over time?\nHas views on triple A games become more negative over time?\nHave indie games surpassed triple A games in player sentiment?\n\nNote: - The use of the word “popularity” is solely used to describe the number of players who engage with a game, and is not necessarily tied to sentiment. A game described as popular in this project can still have a bad sentiment if its a bad game that a lot of people played. - Whenever the project mentions saving a file, this file in question is not included in the repository. Saving refers to the fact that when you run the project on your local machine, it will generated a saved data file so that you (the user) don’t have to run any processing steps twice. This does mean however that if you wish to run the code yourself, you will have to all run preprocessing steps at least once, which will take a significant amount of time.\n\n\nThe data I’ll be using is comprised of two datasets, the 100 Million+ Steam Reviews dataset by KieranPO’C and the Steam Games Dataset by Martin Bustos. Due to the sheer size of these two datasets (thus making them unavailable in this Github repo) and the inability to direct download the files (Kaggle has download restrictions), you will need a Kaggle account to download the datasets yourself if you wish to run this code on your own machine. Insert the games.json file from the Steam Games Dataset and the all_reviews.csv file from the 100 Million+ Steam Reviews dataset into the data folder of this project, then the following code will be able to run.\nWarning: Due to the sheer size of the datasets the code will take a while to run depending on your computer’s specs. Running the preprocessing steps will take a significant amount of computation power. If you are using an online service be cognizant that running this may rack up costs very quickly. It is highly recommended to run this locally. The average run time of the preprocessing steps on my machine was around 10-15 minutes (the combined datasets are around 41GB in size). Once that step is over everything else is relatively quick, so only run the preprocessing step once.\n\n# ============\n# Pre-processing code. Reads the two datasets, then joins them into one.\n# ============\n\nimport pandas as pd\nfrom pathlib import Path\n\nmy_file = Path(\"Data/data.pkl\")\nif my_file.is_file():\n    dataset = pd.read_pickle(\"Data/data.pkl\")\nelse:\n    # Steam Games Dataset\n    game_info_dataset = pd.read_json(\"data/games.json\")\n    game_info_dataset = game_info_dataset.transpose()\n    # 100 Million+ Steam Reviews\n    game_review_dataset = pd.read_csv(\"Data/all_reviews.csv\")\n    \n    dataset = pd.merge(game_info_dataset, game_review_dataset, left_on='name', right_on='game') # INNER JOIN between databases based on game name\n    \n    # Dropping all irrelevant attributes\n    dataset = dataset.drop(\n        [\"app_name\", \"median_playtime_forever\", \"median_playtime_2weeks\", \"average_playtime_2weeks\", \n         \"header_image\", \"peak_ccu\", \"app_id\", \"dlc_count\", \"reviews\", \"support_url\", \"support_email\", \n         \"website\", \"windows\", \"mac\", \"linux\", \"metacritic_score\", \"metacritic_url\", \"achievements\",\n         \"recommendations\", \"notes\", \"supported_languages\", \"full_audio_languages\", \"packages\", \"developers\",\n         \"publishers\", \"categories\", \"screenshots\", \"movies\", \"user_score\", \"score_rank\", \"appid\", \"author_steamid\", \n         \"author_num_games_owned\", \"author_num_reviews\", \"author_playtime_forever\", \"author_playtime_last_two_weeks\", \n         \"author_playtime_at_review\", \"author_last_played\", \"votes_up\", \"votes_funny\", \"weighted_vote_score\", \"comment_count\",\n         \"steam_purchase\", \"received_for_free\", \"written_during_early_access\", \"hidden_in_steam_china\", \"steam_china_location\",\n         \"recommendationid\", \"timestamp_updated\"\n        ]\n        , axis=1, errors='ignore')\n    # Reformatting release date into a workable format\n    dataset[\"release_date\"] = pd.to_datetime(dataset[\"release_date\"], format='mixed')\n    dataset['release_year'] = dataset['release_date'].dt.year\n    dataset['release_month'] = dataset['release_date'].dt.month\n    dataset.to_pickle(\"Data/data.pkl\")\n\n# Seperation of dataset into Indie games and Triple A games\nindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" in x) | dataset.tags.map(lambda x : \"Indie\" in dict(x).keys())]\nnonindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" not in x) & dataset.tags.map(lambda x : \"Indie\" not in dict(x).keys())]\n\n\nindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n0\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nGalactic Bowling (aka Alien Monster Bowling Le...\n1673193813\n1\n2008\n10\n\n\n1\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nI bought this game despite all its flaws to pl...\n1643722668\n0\n2008\n10\n\n\n2\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nFun Game\n1499517402\n1\n2008\n10\n\n\n3\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\ngerman\nEndlich mal wieder ein Bowling Spiel Abwechslu...\n1469980241\n1\n2008\n10\n\n\n4\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nMenu screen works fine. The game itself, howev...\n1451162716\n0\n2008\n10\n\n\n\n\n\n\n\n\nnonindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n141\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nFun game but with a bit of pay to win\n1698161278\n1\n2021\n2\n\n\n142\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nspanish\nExcelentes recuerdos de cuando lo jugaba en fa...\n1698100567\n1\n2021\n2\n\n\n143\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nIs antistres, and the best game of all!\n1697979320\n1\n2021\n2\n\n\n144\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nturkish\nLoc'un ilk çıkmış hali gibi, ama yenilikler ge...\n1697575093\n1\n2021\n2\n\n\n145\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\na blast from the past 9 years ago to be exact\n1697283258\n1\n2021\n2\n\n\n\n\n\n\n\n\n\n\n\n\nThis dataset consists of a myriad of information to related to large selection of games that were on the Steam at the time the dataset was created (8 months prior to the creation of this project). The information important to this study is the general information related to the games listed, i.e. the name of the game, when it was published, and the estimated number of users that own the game. This data is used to place the games in chronological order and obtain descriptors of the game required for comparison (i.e. genre).\n\n\n\nThis dataset as opposed to the previous one is an extremely large dataset that contains information of a significant portion of reviews on any game posted on the Steam store, last updated 7 months prior to the creation of this project. The attributes important to this study are the games each review is related to, whether the user marked the review as positive or negative, and the actual content of the review.\nThese two datasets were merged together into a single, workable pandas DataFrame along with removing a lot of the extraneous data not relevant to this study (i.e. the frankly unusable metacritic reviews). It was then split again to separate out Indie games and Non-Indie games, Non-Indie being a good enough assumption for all the triple A games on the platform."
  },
  {
    "objectID": "posts/SteamAnalysis.html#methods",
    "href": "posts/SteamAnalysis.html#methods",
    "title": "Indie Vs Triple A",
    "section": "",
    "text": "Before I dive into sentiment analysis, I want to identify a few confounding variables that may affect the rating of games independent of the game’s quality. The goal of this project is not to comment on the changing economics of the gaming industry nor the issues with over-saturation of indie games, however these two factors will be mentioned and (as the following sections shows) explored such that they can be accounted for. The information discovered here will later be used to back up the sentiment analysis required to answer the topic of this projects.\n\n\nHere I wanted to see whether there was a significant difference between the number of indie games versus triple A games, and how their numbers have changed over time. The idea is to group the games from each category by month and year, and see the trend in the number of indie games verses triple A games released that month.\n\nimport matplotlib.pyplot as plt\n\n\n```{r}\n#| code-fold: show\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get counts of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\nindie_counts = indie_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\nnonindie_counts = nonindie_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_counts.plot(kind='bar', figsize=(15,5), label=\"Indie\")\nnonindie_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5)\nax.set_ylim(0, 800)\nplt.legend()\nplt.title(\"# of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nUnexpectedly, there is a very clear starting point when the number of games started growing significantly, around 2014 and possibly a year or two earlier. This may be, however, simply the natural growth of the platform. The raw number of indie games will inevitably be larger than triple A due to the larger number of independent developers. However, one notable pattern is the sudden jump in the middle of 2017 for indie games. This jump coincides with the new Steam Direct model that allowed any game to be published on the platform as long as the right documentation was files. This change didn’t affect triple A games significantly however as the data proves, it allowed for a much larger number of indie developers to publish games on the platform. More information on that can be found here.\nOne issue I want to be mindful of is that a majority of indie games aren’t going to be played (most lack the resources to properly market a game). These games won’t have a significant impact on the gaming community as a whole, thus I want to filter them out to focus on games that have the potential to cause significant shifts in the gaming community. However I’ll occasionally bring them back to see if there are trends in terms of what games are being made.\nBelow is a graph is the same as above except filtered for games with at least 20000 players (estimated).\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get counts of indie games released each month, filtering for popular games\nindie_filtered = indie_dataset.drop_duplicates(\"name\")\nindie_popular = indie_filtered[indie_filtered['estimated_owners'] != \"0 - 20000\"]\nindie_popular = indie_popular[indie_popular['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_popular.release_date.dt.to_period('M')\nindie_pop_counts = indie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_filtered = nonindie_dataset.drop_duplicates(\"name\")\nnonindie_popular = nonindie_filtered[nonindie_filtered['estimated_owners'] != \"0 - 20000\"]\nnonindie_popular = nonindie_popular[nonindie_popular['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_popular.release_date.dt.to_period('M')\nnonindie_pop_counts = nonindie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_pop_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_pop_counts.plot(kind='bar', figsize=(15,5), label=\"Indie\")\nnonindie_pop_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5)\nax.set_ylim(0, 800)\nplt.legend()\nplt.title(\"# of Popular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nAn alternate version that shows the “unplayed” games below the x-axis.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n\nindie_filtered = indie_dataset.drop_duplicates(\"name\")\n\n# Get counts of indie games released each month, filtering for popular games\nindie_popular = indie_filtered[indie_filtered['estimated_owners'] != \"0 - 20000\"]\nindie_popular = indie_popular[indie_popular['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_popular.release_date.dt.to_period('M')\nindie_pop_counts = indie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of indie games released each month, filtering for unpopular games\nindie_unpopular = indie_filtered[indie_filtered['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_unpop_months = indie_unpopular.release_date.dt.to_period('M')\nindie_unpop_counts = indie_unpop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\nindie_unpop_counts *= -1\n\n\nnonindie_filtered = nonindie_dataset.drop_duplicates(\"name\")\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_popular = nonindie_filtered[nonindie_filtered['estimated_owners'] != \"0 - 20000\"]\nnonindie_popular = nonindie_popular[nonindie_popular['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_popular.release_date.dt.to_period('M')\nnonindie_pop_counts = nonindie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_unpopular = nonindie_filtered[nonindie_filtered['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_unpop_months = nonindie_unpopular.release_date.dt.to_period('M')\nnonindie_unpop_counts = nonindie_unpop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\nnonindie_unpop_counts *= -1\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_pop_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_pop_counts.plot(kind='bar', figsize=(15,10), label=\"Indie\")\nnonindie_pop_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nindie_unpop_counts.plot(kind='bar', ax=ax, color='C0', label=\"_nolegend_\")\nnonindie_unpop_counts.plot(kind='bar', ax=ax, color='C1', label=\"_nolegend_\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5);\nplt.axhline(y=0, color='black', linewidth=0.5)\nax.set_ylim(-800, 800)\nax.yaxis.set_major_formatter(lambda x, pos: f'{abs(x):g}')\nplt.legend()\nplt.title(\"# of Indie vs Non-Indie games released per month, seperated by popularity\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nThe second graph is the one that is more interesting. While popular indie games are still greater in number, their fluctuations in growth are no different than the popular triple A games. In contrast, unpopular/unknown games tell a different story. The number of unpopular triple A games tend to wax and wane at the same rate that unpopular indie games do, however the quantity of unpopular indie games vastly out number of unpopular triple A games. There is also an obvious point where the chasm between unpopular triple A and indie grew, the same mid-2017 date we observed before. We can see clearly now that the sudden jump of the number of indie games we observed in the first graph went mostly into the amount of unpopular indie games on the platform, with none of it contributing to the number of popular indie games.\nAnother point of interest is the convergence of the number of popular indie and triple A games starting from 2021 to now. Based on my knowledge of the general gaming sphere, this trend is likely due to the increase in high effort indie titles over the past few years. With smash-hit titles like Hollow Knight raising the bar for indie games mixed with the over-saturation in the indie scene, its reasonable to assume that gamers have gotten more picky about the indie titles they’re willing to play while in tandum serious indie developers are focusing a lot more on quality now than quantity\n\n\n\nWhen going through the reasons why or why not people will buy or like a game, cost unsurprisingly is a pretty major factor. There is a lot of discourse surrounding the rising costs of triple A titles, going from a 50 dollars standard to 60, and now major companies are again raising the baseline to 70. As costs of gaming as a hobby rise, I want to see if this is a general trend in gaming as a whole, or whether this is something exclusive to triple A games.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nSurprisingly the mean cost of games hasn’t fluctuated much over time. The game prior to 2006 seem to fluctuate a lot more in pricing, but that is due to the fact that theres not much data for that period of time. Overall though this data doesn’t make much sense considering the trends in game pricing as reported by major studios. The most apparent trend though is that indie games typically cost less than triple A games, an unsurprisingly fact.\nA major factor that may be skewing this data is the fact that along with the rising prices of triple A games, there has also been a rise in the number of free to play games. These games make a majority of their money from in game purchases, as such their profits won’t really be revealed in this graph. To account for this, lets graph the data again, this time removing all free games.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months = indie_months[indie_months['price'] != 0]\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months = nonindie_months[nonindie_months['price'] != 0]\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5))\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Indie vs Non-Indie games released per month, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nSurprisingly again, not much change. One last filter, only considering games with a significant player base.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month, filtering for popular games\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months = indie_months[indie_months['estimated_owners'] != \"0 - 20000\"]\nindie_months = indie_months[indie_months['estimated_owners'] != \"0 - 0\"]\nindie_months = indie_months[indie_months['price'] != 0]\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month, filtering for popular games\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months = nonindie_months[nonindie_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_months = nonindie_months[nonindie_months['estimated_owners'] != \"0 - 0\"]\nnonindie_months = nonindie_months[nonindie_months['price'] != 0]\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5))\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Popular Indie vs Non-Indie games released per month, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nThe expected pattern now emerges, the prices of triple A games rising over time while indie games have stayed relatively the same. When smoothed out to average price per year rather than month.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_years = dataset.drop_duplicates(\"name\").release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_years.min(), end=dataset_years.max(), freq='Y')\n\n# Get average cost of indie games released each year\nindie_years = indie_dataset.drop_duplicates(\"name\").copy()\nindie_years = indie_years[indie_years['estimated_owners'] != \"0 - 20000\"]\nindie_years = indie_years[indie_years['estimated_owners'] != \"0 - 0\"]\nindie_years = indie_years[indie_years['price'] != 0]\nindie_years[\"release_date\"] = indie_years[\"release_date\"].dt.to_period('Y')\nindie_prices = indie_years[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each year\nnonindie_years = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_years = nonindie_years[nonindie_years['estimated_owners'] != \"0 - 20000\"]\nnonindie_years = nonindie_years[nonindie_years['estimated_owners'] != \"0 - 0\"]\nnonindie_years = nonindie_years[nonindie_years['price'] != 0]\nnonindie_years[\"release_date\"] = nonindie_years[\"release_date\"].dt.to_period('Y')\nnonindie_prices = nonindie_years[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(kind='line', figsize=(15,5))\nnonindie_prices.plot(kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Popular Indie vs Non-Indie games released per year, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nThe divergence in prices is now very apparent. While indie games haven’t changed much in price, going from slightly below 10 dollars to slightly above, triple A games has been growing substantially. With a staring average cost of 10 dollars, the cost has grown to over double of that, ending at around 25 dollars. It confirms that yes, for the games that most player are playing, the average cost of triple A games has been growing over time. It is very likely that this trend will strong influence the general sentiment of a game (an average game could be interpreted as bad if its overpriced), thus this is an important trend to note going into review sentiment analysis.\n\n\n\n\nOverall two things can be concluded.\nFirst, the quantity of indie games significantly outweighs the number of triple A games on Steam, while also having a very heavy slant toward unpopular games. Keeping this in mind while doing sentiment analysis is extremely important, for the overabundance little known indie Steam games may significantly skew the end results of the sentiment analysis. A majority of these unpopular games are best described as “student projects”, inherently lacking in quality and therefore attracting only a couple reviews that are more likely than not to be negative. Filtering by popularity seems to be the best way to mitigate the imbalance in popularity, though this filtering should be noted when evaluating the results.\nSecond, overall changes in the cost in triple-A games has been rising steadily over time at a significant rate. There is a high chance that price will become more and more of a reason behind negative reviews for triple-A games, thus it’ll be something to look out for if a strong downward trend in triple-A game sentiment is revealed.\n\n\n\nAn important note, while yes Steam gives average user ratings on their Steam page and totals the number of positive vs. negative reviews, reviews tend do have a lot more nuance then a binary recommend/not recommend. Some reviewers may be extremely mixed about a game but still slightly lean toward not, and vice versa. Hence sentiment analysis will be used to identify these nuances and get a better measure of how players feel about a game.\n\n\nThe below code takes in the dataset and preforms a sentiment analysis on the text of each review, then separates the dataset into indie games and non-indie games. Warning: Due to the sheer number of reviews in the data set (around 50 million after filtering), the following code takes a very long time to run. It took me around 8 hours to finish running the code (with a very well spec’d PC), even with swifter optimization (automatic vectorization, multithreading, etc.). The data processed is saved as a file so that the sentiment analysis doesn’t have to be run multiple times, however be prepared for this section to take a while.\n\nimport matplotlib.pyplot as plt\nimport nltk\n\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment import vader\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import opinion_lexicon\nfrom nltk.stem.porter import PorterStemmer\n\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('vader_lexicon')\nnltk.download('opinion_lexicon')\n\n[nltk_data] Downloading package punkt to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n[nltk_data] Downloading package opinion_lexicon to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package opinion_lexicon is already up-to-date!\n\n\nTrue\n\n\n\nimport swifter\nimport tqdm as notebook_tqdm\n\n\nmy_file = Path(\"Data/sentiment.pkl\")\nif my_file.is_file():\n    sentiment_data = pd.read_pickle(\"Data/sentiment.pkl\")\nelse:\n    # Init sentiment analyzer\n    \n    engStopwords = stopwords.words('english')\n    sentimentAnalyzer = vader.SentimentIntensityAnalyzer()\n    \n    # Filter dataset for just reviews\n    \n    review_dataset = dataset[dataset[\"language\"] == \"english\"]\n    review_dataset = review_dataset[[\"game\", \"release_date\", \"review\"]]\n    \n    # Function that returns the sentiment score of a review\n    \n    def getSentiment(row):\n        try:\n            words = word_tokenize(row[\"review\"])\n        except Exception as e:\n            return pd.NA\n        score = 0\n        for w in words:\n            score += sentimentAnalyzer.polarity_scores(w)['compound']\n        return score\n    \n    # Generate sentiment scores for all the reviews in the dataset\n    # WARNING: THIS CODE TAKES AROUND 8 HOURS TO RUN\n    \n    sentiment_data = review_dataset.swifter.apply(getSentiment, axis=1)\n    \n    sentiment_data = pd.to_numeric(sentiment_data)\n    sentiment_data.to_pickle(\"Data/sentiment.pkl\")\n\n# Add sentiment data to dataset\nreview_dataset = dataset[dataset[\"language\"] == \"english\"].copy()\nreview_dataset[\"sentiment\"] = sentiment_data\n\n# Split into indie and non-indie\nreview_indie_dataset = review_dataset[review_dataset.genres.map(lambda x : \"Indie\" in x) | review_dataset.tags.map(lambda x : \"Indie\" in dict(x).keys())]\nreview_nonindie_dataset = review_dataset[review_dataset.genres.map(lambda x : \"Indie\" not in x) & review_dataset.tags.map(lambda x : \"Indie\" not in dict(x).keys())]\n\nC:\\Users\\RSheep\\.conda\\envs\\dh140\\Lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\nreview_nonindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\n...\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\nsentiment\n\n\n\n\n141\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nFun game but with a bit of pay to win\n1698161278\n1\n2021\n2\n0.9938\n\n\n143\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nIs antistres, and the best game of all!\n1697979320\n1\n2021\n2\n0.6369\n\n\n145\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\na blast from the past 9 years ago to be exact\n1697283258\n1\n2021\n2\n0.0000\n\n\n146\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nPay to win slow load..trash game\n1695433549\n0\n2021\n2\n0.4832\n\n\n151\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nI live this game\n1692061364\n1\n2021\n2\n0.0000\n\n\n\n\n5 rows × 21 columns"
  },
  {
    "objectID": "posts/SteamAnalysis.html#results",
    "href": "posts/SteamAnalysis.html#results",
    "title": "Indie Vs Triple A",
    "section": "",
    "text": "This section will be dedicated to analyzing the changes in sentiment over time with respect to the games that were released per month. The same techniques used to analyze the quantity of games released per month will be used here to analyze and account for game popularity and the quantity of games when doing sentiment analysis.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = review_indie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_months = review_nonindie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_months = review_indie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_months = review_nonindie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 20000\"]\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Popular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 20000\"]\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Popular Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Unpopular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Unpopular Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\nExamining general game sentiment over time it seems that there is not only no difference between the sentiment scores of Indie vs. Triple A games, but also no major fluctuation of sentiment scores over time either. This holds true even if the data is filtered for popular games (games with &gt;20000 owners) and unpopular games. The data shows that time and popularity have no overall impact on the sentiment scores of games.\nThus to answer the questions at the beginning of the project, no, sentiment toward both indie games and triple A games have not changed over time, and as a result indie games have not surpassed triple A games in player sentiment.\nDiscussion on why this might be the case will be expanded upon in the discussion sections.\n\n\n\nWhile time itself may not have affected sentiments, what about when its separated by costs?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'] == 0]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'] == 0]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, $0\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(0, 10, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(0, 10, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$0-\\$10\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(10, 30, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(10, 30, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$10-\\$30\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(30, 60, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(30, 60, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$30-\\$60\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'] &gt; 60]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'] &gt; 60]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, &gt;$60\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\nThe data again reveals that there isn’t a major difference between player sentiment when comparing Indie vs Non-Indie games, nor has sentiment changed over time. One interesting aspect to note however is the fact that around the \\$30 to \\$60 range is when sentiment over games starts to become highly variable, with indie games having a much higher sentiment variability than Non-Indie games do. There are various reasons that this could be the case, which will be discussed in the discussion section."
  },
  {
    "objectID": "posts/SteamAnalysis.html#discussion",
    "href": "posts/SteamAnalysis.html#discussion",
    "title": "Indie Vs Triple A",
    "section": "",
    "text": "As shown by the sentiment analysis graphs, sentiment toward both indie games and triple-A games do not differ arguably at all. No matter how you slice it, the data always reveals that games of both categories have the same average sentiment, whether you look at high cost games, low cost games, popular or not. It is strong evidence that despite how much emphasis is put on the divide between “Indie” vs “Triple-A” games, when it comes down to it the distinction is not an important contributing factor to average player sentiment. There could be multiple reasons why this could be the case.\nOne theory is that people genuinely do not care about whether the game is indie or not, for other factors influence their sentiment to a greater degree than how many people made the game they’re playing. Such a theory would make sense, why would a good game be any better if one person made it versus 100 people? Would a bad game be alright if a single person made it? Players will inevitably focus more on the gameplay, art, music, etc. of a game, thus knowing it was made by a large or small team won’t override their perception of the game.\nAnother theory is that the opposing views may just cancel each other out. It is undeniable that some people are willing to cut indie games more slack when it comes to bugs and quality issues as they are aware that the lack of resources will inherently lead to more mistakes slipping through the cracks. On the side of the argument, there are also players out there that view indie games as inherently lesser than anything triple A can create. Indie developers simply won’t have the resources, so it’ll inherently lack the high fidelity graphics and realism that some communities believe is a must have. Theses opposing view may cancel each other out, leading to a middling sentiment when reviews are considered as a whole. A piece of evidence that backs this viewpoint up is the 30 dollar to 60 dollar sentiment graph. Its not surprising to learn that the most expensive something is, the stronger opinions people will have about it to either justify their purchase or express anger over being ripped off. What is interesting is how much more variability indie games have compared the their triple-A counterparts. Typically the 30 dollar to 60 dollar range is where most gamers will deem a game to be asking for a premium price, not overly expensive but also pricey enough where they expect a certain degree of quality. Its a mindset carried over from the pricing structure of console games, who have a fixed $60 price tag (as of now) for all first-party games. Thus, going with the opposing views theory, the higher variability may indicate the point where the excuse “well its just an indie game” for mediocre no longer holds due to the high asking price. Thus, it divides indie games into two camps, games that are deemed worthy of price and games that are absolutely not. Confirmation bias then kicks in when reviewers consider the fact that the game is an indie game, i.e. “This game is so good, and its made by one person. Of course its worth purchasing” or “This game is terrible, its made by a single greedy dev who wants to steal your money.”\nThe overall takeaway from this project though is that despite countless buzzwords about indie vs triple A in the gaming community, there really isn’t any general statement to be made about the quality of “indie games as a whole” or “triple A games as a whole”. The games within each category vary too significantly to make a blanket statement the category as a whole. Thus going forward, its best to be cautious of any source that claims anything about either category as a whole, as what they say may sat more about them than the games they’re talking about."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "SteamAnalysis.html",
    "href": "SteamAnalysis.html",
    "title": "Indie Vs Triple A",
    "section": "",
    "text": "The gaming industry has seen a shift in recent years, that being the rise of independent developers. In the early 2000s, the idea that indie games could be anything close to good was a pipe-dream. The general consensus was that only triple A studios had the expertise and budget to make a “real” video game. However, in 2008, the indie game Braid was released, revealing to the world that there is potential for the independent creator to make an indie game worthy of critical acclaim. Since then, there has been a significant shift in player sentiment as indie games have legitimized their place in their genre and a growing disdain toward triple A studios due to the over-commercialization of games. Thus, my project aims to study the shifts in player sentiment over the past few years to see if these trends are backed by data from the popular game distribution platform Steam. This project aims to answer the following questions:\n\nHas views on indie games become more positive over time?\nHas views on triple A games become more negative over time?\nHave indie games surpassed triple A games in player sentiment?\n\nNote: - The use of the word “popularity” is solely used to describe the number of players who engage with a game, and is not necessarily tied to sentiment. A game described as popular in this project can still have a bad sentiment if its a bad game that a lot of people played. - Whenever the project mentions saving a file, this file in question is not included in the repository. Saving refers to the fact that when you run the project on your local machine, it will generated a saved data file so that you (the user) don’t have to run any processing steps twice. This does mean however that if you wish to run the code yourself, you will have to all run preprocessing steps at least once, which will take a significant amount of time.\n\n\nThe data I’ll be using is comprised of two datasets, the 100 Million+ Steam Reviews dataset by KieranPO’C and the Steam Games Dataset by Martin Bustos. Due to the sheer size of these two datasets (thus making them unavailable in this Github repo) and the inability to direct download the files (Kaggle has download restrictions), you will need a Kaggle account to download the datasets yourself if you wish to run this code on your own machine. Insert the games.json file from the Steam Games Dataset and the all_reviews.csv file from the 100 Million+ Steam Reviews dataset into the data folder of this project, then the following code will be able to run.\nWarning: Due to the sheer size of the datasets the code will take a while to run depending on your computer’s specs. Running the preprocessing steps will take a significant amount of computation power. If you are using an online service be cognizant that running this may rack up costs very quickly. It is highly recommended to run this locally. The average run time of the preprocessing steps on my machine was around 10-15 minutes (the combined datasets are around 41GB in size). Once that step is over everything else is relatively quick, so only run the preprocessing step once.\n\n# ============\n# Pre-processing code. Reads the two datasets, then joins them into one.\n# ============\n\nimport pandas as pd\nfrom pathlib import Path\n\nmy_file = Path(\"Data/data.pkl\")\nif my_file.is_file():\n    dataset = pd.read_pickle(\"Data/data.pkl\")\nelse:\n    # Steam Games Dataset\n    game_info_dataset = pd.read_json(\"data/games.json\")\n    game_info_dataset = game_info_dataset.transpose()\n    # 100 Million+ Steam Reviews\n    game_review_dataset = pd.read_csv(\"Data/all_reviews.csv\")\n    \n    dataset = pd.merge(game_info_dataset, game_review_dataset, left_on='name', right_on='game') # INNER JOIN between databases based on game name\n    \n    # Dropping all irrelevant attributes\n    dataset = dataset.drop(\n        [\"app_name\", \"median_playtime_forever\", \"median_playtime_2weeks\", \"average_playtime_2weeks\", \n         \"header_image\", \"peak_ccu\", \"app_id\", \"dlc_count\", \"reviews\", \"support_url\", \"support_email\", \n         \"website\", \"windows\", \"mac\", \"linux\", \"metacritic_score\", \"metacritic_url\", \"achievements\",\n         \"recommendations\", \"notes\", \"supported_languages\", \"full_audio_languages\", \"packages\", \"developers\",\n         \"publishers\", \"categories\", \"screenshots\", \"movies\", \"user_score\", \"score_rank\", \"appid\", \"author_steamid\", \n         \"author_num_games_owned\", \"author_num_reviews\", \"author_playtime_forever\", \"author_playtime_last_two_weeks\", \n         \"author_playtime_at_review\", \"author_last_played\", \"votes_up\", \"votes_funny\", \"weighted_vote_score\", \"comment_count\",\n         \"steam_purchase\", \"received_for_free\", \"written_during_early_access\", \"hidden_in_steam_china\", \"steam_china_location\",\n         \"recommendationid\", \"timestamp_updated\"\n        ]\n        , axis=1, errors='ignore')\n    # Reformatting release date into a workable format\n    dataset[\"release_date\"] = pd.to_datetime(dataset[\"release_date\"], format='mixed')\n    dataset['release_year'] = dataset['release_date'].dt.year\n    dataset['release_month'] = dataset['release_date'].dt.month\n    dataset.to_pickle(\"Data/data.pkl\")\n\n# Seperation of dataset into Indie games and Triple A games\nindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" in x) | dataset.tags.map(lambda x : \"Indie\" in dict(x).keys())]\nnonindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" not in x) & dataset.tags.map(lambda x : \"Indie\" not in dict(x).keys())]\n\n\nindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n0\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nGalactic Bowling (aka Alien Monster Bowling Le...\n1673193813\n1\n2008\n10\n\n\n1\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nI bought this game despite all its flaws to pl...\n1643722668\n0\n2008\n10\n\n\n2\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nFun Game\n1499517402\n1\n2008\n10\n\n\n3\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\ngerman\nEndlich mal wieder ein Bowling Spiel Abwechslu...\n1469980241\n1\n2008\n10\n\n\n4\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nMenu screen works fine. The game itself, howev...\n1451162716\n0\n2008\n10\n\n\n\n\n\n\n\n\nnonindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n141\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nFun game but with a bit of pay to win\n1698161278\n1\n2021\n2\n\n\n142\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nspanish\nExcelentes recuerdos de cuando lo jugaba en fa...\n1698100567\n1\n2021\n2\n\n\n143\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nIs antistres, and the best game of all!\n1697979320\n1\n2021\n2\n\n\n144\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nturkish\nLoc'un ilk çıkmış hali gibi, ama yenilikler ge...\n1697575093\n1\n2021\n2\n\n\n145\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\na blast from the past 9 years ago to be exact\n1697283258\n1\n2021\n2\n\n\n\n\n\n\n\n\n\n\n\n\nThis dataset consists of a myriad of information to related to large selection of games that were on the Steam at the time the dataset was created (8 months prior to the creation of this project). The information important to this study is the general information related to the games listed, i.e. the name of the game, when it was published, and the estimated number of users that own the game. This data is used to place the games in chronological order and obtain descriptors of the game required for comparison (i.e. genre).\n\n\n\nThis dataset as opposed to the previous one is an extremely large dataset that contains information of a significant portion of reviews on any game posted on the Steam store, last updated 7 months prior to the creation of this project. The attributes important to this study are the games each review is related to, whether the user marked the review as positive or negative, and the actual content of the review.\nThese two datasets were merged together into a single, workable pandas DataFrame along with removing a lot of the extraneous data not relevant to this study (i.e. the frankly unusable metacritic reviews). It was then split again to separate out Indie games and Non-Indie games, Non-Indie being a good enough assumption for all the triple A games on the platform."
  },
  {
    "objectID": "SteamAnalysis.html#introduction",
    "href": "SteamAnalysis.html#introduction",
    "title": "Indie Vs Triple A",
    "section": "",
    "text": "The gaming industry has seen a shift in recent years, that being the rise of independent developers. In the early 2000s, the idea that indie games could be anything close to good was a pipe-dream. The general consensus was that only triple A studios had the expertise and budget to make a “real” video game. However, in 2008, the indie game Braid was released, revealing to the world that there is potential for the independent creator to make an indie game worthy of critical acclaim. Since then, there has been a significant shift in player sentiment as indie games have legitimized their place in their genre and a growing disdain toward triple A studios due to the over-commercialization of games. Thus, my project aims to study the shifts in player sentiment over the past few years to see if these trends are backed by data from the popular game distribution platform Steam. This project aims to answer the following questions:\n\nHas views on indie games become more positive over time?\nHas views on triple A games become more negative over time?\nHave indie games surpassed triple A games in player sentiment?\n\nNote: - The use of the word “popularity” is solely used to describe the number of players who engage with a game, and is not necessarily tied to sentiment. A game described as popular in this project can still have a bad sentiment if its a bad game that a lot of people played. - Whenever the project mentions saving a file, this file in question is not included in the repository. Saving refers to the fact that when you run the project on your local machine, it will generated a saved data file so that you (the user) don’t have to run any processing steps twice. This does mean however that if you wish to run the code yourself, you will have to all run preprocessing steps at least once, which will take a significant amount of time.\n\n\nThe data I’ll be using is comprised of two datasets, the 100 Million+ Steam Reviews dataset by KieranPO’C and the Steam Games Dataset by Martin Bustos. Due to the sheer size of these two datasets (thus making them unavailable in this Github repo) and the inability to direct download the files (Kaggle has download restrictions), you will need a Kaggle account to download the datasets yourself if you wish to run this code on your own machine. Insert the games.json file from the Steam Games Dataset and the all_reviews.csv file from the 100 Million+ Steam Reviews dataset into the data folder of this project, then the following code will be able to run.\nWarning: Due to the sheer size of the datasets the code will take a while to run depending on your computer’s specs. Running the preprocessing steps will take a significant amount of computation power. If you are using an online service be cognizant that running this may rack up costs very quickly. It is highly recommended to run this locally. The average run time of the preprocessing steps on my machine was around 10-15 minutes (the combined datasets are around 41GB in size). Once that step is over everything else is relatively quick, so only run the preprocessing step once.\n\n# ============\n# Pre-processing code. Reads the two datasets, then joins them into one.\n# ============\n\nimport pandas as pd\nfrom pathlib import Path\n\nmy_file = Path(\"Data/data.pkl\")\nif my_file.is_file():\n    dataset = pd.read_pickle(\"Data/data.pkl\")\nelse:\n    # Steam Games Dataset\n    game_info_dataset = pd.read_json(\"data/games.json\")\n    game_info_dataset = game_info_dataset.transpose()\n    # 100 Million+ Steam Reviews\n    game_review_dataset = pd.read_csv(\"Data/all_reviews.csv\")\n    \n    dataset = pd.merge(game_info_dataset, game_review_dataset, left_on='name', right_on='game') # INNER JOIN between databases based on game name\n    \n    # Dropping all irrelevant attributes\n    dataset = dataset.drop(\n        [\"app_name\", \"median_playtime_forever\", \"median_playtime_2weeks\", \"average_playtime_2weeks\", \n         \"header_image\", \"peak_ccu\", \"app_id\", \"dlc_count\", \"reviews\", \"support_url\", \"support_email\", \n         \"website\", \"windows\", \"mac\", \"linux\", \"metacritic_score\", \"metacritic_url\", \"achievements\",\n         \"recommendations\", \"notes\", \"supported_languages\", \"full_audio_languages\", \"packages\", \"developers\",\n         \"publishers\", \"categories\", \"screenshots\", \"movies\", \"user_score\", \"score_rank\", \"appid\", \"author_steamid\", \n         \"author_num_games_owned\", \"author_num_reviews\", \"author_playtime_forever\", \"author_playtime_last_two_weeks\", \n         \"author_playtime_at_review\", \"author_last_played\", \"votes_up\", \"votes_funny\", \"weighted_vote_score\", \"comment_count\",\n         \"steam_purchase\", \"received_for_free\", \"written_during_early_access\", \"hidden_in_steam_china\", \"steam_china_location\",\n         \"recommendationid\", \"timestamp_updated\"\n        ]\n        , axis=1, errors='ignore')\n    # Reformatting release date into a workable format\n    dataset[\"release_date\"] = pd.to_datetime(dataset[\"release_date\"], format='mixed')\n    dataset['release_year'] = dataset['release_date'].dt.year\n    dataset['release_month'] = dataset['release_date'].dt.month\n    dataset.to_pickle(\"Data/data.pkl\")\n\n# Seperation of dataset into Indie games and Triple A games\nindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" in x) | dataset.tags.map(lambda x : \"Indie\" in dict(x).keys())]\nnonindie_dataset = dataset[dataset.genres.map(lambda x : \"Indie\" not in x) & dataset.tags.map(lambda x : \"Indie\" not in dict(x).keys())]\n\n\nindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n0\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nGalactic Bowling (aka Alien Monster Bowling Le...\n1673193813\n1\n2008\n10\n\n\n1\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nI bought this game despite all its flaws to pl...\n1643722668\n0\n2008\n10\n\n\n2\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nFun Game\n1499517402\n1\n2008\n10\n\n\n3\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\ngerman\nEndlich mal wieder ein Bowling Spiel Abwechslu...\n1469980241\n1\n2008\n10\n\n\n4\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n0 - 20000\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nMenu screen works fine. The game itself, howev...\n1451162716\n0\n2008\n10\n\n\n\n\n\n\n\n\nnonindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\nestimated_owners\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\n\n\n\n\n141\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nFun game but with a bit of pay to win\n1698161278\n1\n2021\n2\n\n\n142\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nspanish\nExcelentes recuerdos de cuando lo jugaba en fa...\n1698100567\n1\n2021\n2\n\n\n143\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nIs antistres, and the best game of all!\n1697979320\n1\n2021\n2\n\n\n144\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nturkish\nLoc'un ilk çıkmış hali gibi, ama yenilikler ge...\n1697575093\n1\n2021\n2\n\n\n145\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n50000 - 100000\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\na blast from the past 9 years ago to be exact\n1697283258\n1\n2021\n2\n\n\n\n\n\n\n\n\n\n\n\n\nThis dataset consists of a myriad of information to related to large selection of games that were on the Steam at the time the dataset was created (8 months prior to the creation of this project). The information important to this study is the general information related to the games listed, i.e. the name of the game, when it was published, and the estimated number of users that own the game. This data is used to place the games in chronological order and obtain descriptors of the game required for comparison (i.e. genre).\n\n\n\nThis dataset as opposed to the previous one is an extremely large dataset that contains information of a significant portion of reviews on any game posted on the Steam store, last updated 7 months prior to the creation of this project. The attributes important to this study are the games each review is related to, whether the user marked the review as positive or negative, and the actual content of the review.\nThese two datasets were merged together into a single, workable pandas DataFrame along with removing a lot of the extraneous data not relevant to this study (i.e. the frankly unusable metacritic reviews). It was then split again to separate out Indie games and Non-Indie games, Non-Indie being a good enough assumption for all the triple A games on the platform."
  },
  {
    "objectID": "SteamAnalysis.html#methods",
    "href": "SteamAnalysis.html#methods",
    "title": "Indie Vs Triple A",
    "section": "Methods",
    "text": "Methods\n\nExploratory Preanalysis of Data\nBefore I dive into sentiment analysis, I want to identify a few confounding variables that may affect the rating of games independent of the game’s quality. The goal of this project is not to comment on the changing economics of the gaming industry nor the issues with over-saturation of indie games, however these two factors will be mentioned and (as the following sections shows) explored such that they can be accounted for.\n\nGames Per Month\nHere I wanted to see whether there was a significant difference between the number of indie games versus triple A games, and how their numbers have changed over time. The idea is to group the games from each category by month and year, and see the trend in the number of indie games verses triple A games released that month.\n\nimport matplotlib.pyplot as plt\n\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get counts of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\nindie_counts = indie_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\nnonindie_counts = nonindie_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_counts.plot(kind='bar', figsize=(15,5), label=\"Indie\")\nnonindie_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5)\nax.set_ylim(0, 800)\nplt.legend()\nplt.title(\"# of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nUnexpectedly, there is a very clear starting point when the number of games started growing significantly, around 2014 and possibly a year or two earlier. This may be, however, simply the natural growth of the platform. The raw number of indie games will inevitably be larger than triple A due to the larger number of independent developers. However, one notable pattern is the sudden jump in the middle of 2017 for indie games. This jump coincides with the new Steam Direct model that allowed any game to be published on the platform as long as the right documentation was files. This change didn’t affect triple A games significantly however as the data proves, it allowed for a much larger number of indie developers to publish games on the platform. More information on that can be found here.\nOne issue I want to be mindful of is that a majority of indie games aren’t going to be played (most lack the resources to properly market a game). These games won’t have a significant impact on the gaming community as a whole, thus I want to filter them out to focus on games that have the potential to cause significant shifts in the gaming community. However I’ll occasionally bring them back to see if there are trends in terms of what games are being made.\nBelow is a graph is the same as above except filtered for games with at least 20000 players (estimated).\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get counts of indie games released each month, filtering for popular games\nindie_filtered = indie_dataset.drop_duplicates(\"name\")\nindie_popular = indie_filtered[indie_filtered['estimated_owners'] != \"0 - 20000\"]\nindie_popular = indie_popular[indie_popular['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_popular.release_date.dt.to_period('M')\nindie_pop_counts = indie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_filtered = nonindie_dataset.drop_duplicates(\"name\")\nnonindie_popular = nonindie_filtered[nonindie_filtered['estimated_owners'] != \"0 - 20000\"]\nnonindie_popular = nonindie_popular[nonindie_popular['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_popular.release_date.dt.to_period('M')\nnonindie_pop_counts = nonindie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_pop_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_pop_counts.plot(kind='bar', figsize=(15,5), label=\"Indie\")\nnonindie_pop_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5)\nax.set_ylim(0, 800)\nplt.legend()\nplt.title(\"# of Popular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nAn alternate version that shows the “unplayed” games below the x-axis.\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n\nindie_filtered = indie_dataset.drop_duplicates(\"name\")\n\n# Get counts of indie games released each month, filtering for popular games\nindie_popular = indie_filtered[indie_filtered['estimated_owners'] != \"0 - 20000\"]\nindie_popular = indie_popular[indie_popular['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_popular.release_date.dt.to_period('M')\nindie_pop_counts = indie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of indie games released each month, filtering for unpopular games\nindie_unpopular = indie_filtered[indie_filtered['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_unpop_months = indie_unpopular.release_date.dt.to_period('M')\nindie_unpop_counts = indie_unpop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\nindie_unpop_counts *= -1\n\n\nnonindie_filtered = nonindie_dataset.drop_duplicates(\"name\")\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_popular = nonindie_filtered[nonindie_filtered['estimated_owners'] != \"0 - 20000\"]\nnonindie_popular = nonindie_popular[nonindie_popular['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_popular.release_date.dt.to_period('M')\nnonindie_pop_counts = nonindie_pop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\n\n# Get counts of nonindie games released each month, filtering for popular games\nnonindie_unpopular = nonindie_filtered[nonindie_filtered['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_unpop_months = nonindie_unpopular.release_date.dt.to_period('M')\nnonindie_unpop_counts = nonindie_unpop_months.value_counts().reindex(date_range, fill_value=0).sort_index()\nnonindie_unpop_counts *= -1\n\n# Graph data\nticks = []\nlabels = []\nfor i, period in enumerate(indie_pop_counts.index):\n    if period.month == 1:  # Show the tick at the start of each year\n        ticks.append(i)\n        labels.append(str(period.year))\nax = indie_pop_counts.plot(kind='bar', figsize=(15,10), label=\"Indie\")\nnonindie_pop_counts.plot(kind='bar', ax=ax, color='C1', label=\"Non-Indie\")\nindie_unpop_counts.plot(kind='bar', ax=ax, color='C0', label=\"_nolegend_\")\nnonindie_unpop_counts.plot(kind='bar', ax=ax, color='C1', label=\"_nolegend_\")\nplt.xticks(ticks=ticks, labels=labels)\nplt.grid(axis='x', linestyle=':', linewidth=0.5);\nplt.axhline(y=0, color='black', linewidth=0.5)\nax.set_ylim(-800, 800)\nax.yaxis.set_major_formatter(lambda x, pos: f'{abs(x):g}')\nplt.legend()\nplt.title(\"# of Indie vs Non-Indie games released per month, seperated by popularity\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"# of Games\");\n\n\n\n\n\n\n\n\nThe second graph is the one that is more interesting. While popular indie games are still greater in number, their fluctuations in growth are no different than the popular triple A games. In contrast, unpopular/unknown games tell a different story. The number of unpopular triple A games tend to wax and wane at the same rate that unpopular indie games do, however the quantity of unpopular indie games vastly out number of unpopular triple A games. There is also an obvious point where the chasm between unpopular triple A and indie grew, the same mid-2017 date we observed before. We can see clearly now that the sudden jump of the number of indie games we observed in the first graph went mostly into the amount of unpopular indie games on the platform, with none of it contributing to the number of popular indie games.\nAnother point of interest is the convergence of the number of popular indie and triple A games starting from 2021 to now. Based on my knowledge of the general gaming sphere, this trend is likely due to the increase in high effort indie titles over the past few years. With smash-hit titles like Hollow Knight raising the bar for indie games mixed with the over-saturation in the indie scene, its reasonable to assume that gamers have gotten more picky about the indie titles they’re willing to play while in tandum serious indie developers are focusing a lot more on quality now than quantity\n\n\nCost of Games\nWhen going through the reasons why or why not people will buy or like a game, cost unsurprisingly is a pretty major factor. There is a lot of discourse surrounding the rising costs of triple A titles, going from a 50 dollars standard to 60, and now major companies are again raising the baseline to 70. As costs of gaming as a hobby rise, I want to see if this is a general trend in gaming as a whole, or whether this is something exclusive to triple A games.\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nSurprisingly the mean cost of games hasn’t fluctuated much over time. The game prior to 2006 seem to fluctuate a lot more in pricing, but that is due to the fact that theres not much data for that period of time. Overall though this data doesn’t make much sense considering the trends in game pricing as reported by major studios. The most apparent trend though is that indie games typically cost less than triple A games, an unsurprisingly fact.\nA major factor that may be skewing this data is the fact that along with the rising prices of triple A games, there has also been a rise in the number of free to play games. These games make a majority of their money from in game purchases, as such their profits won’t really be revealed in this graph. To account for this, lets graph the data again, this time removing all free games.\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months = indie_months[indie_months['price'] != 0]\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months = nonindie_months[nonindie_months['price'] != 0]\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5))\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Indie vs Non-Indie games released per month, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nSurprisingly again, not much change. One last filter, only considering games with a significant player base.\n\n# Calculate date range of the data\ndataset_months = dataset.drop_duplicates(\"name\").release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month, filtering for popular games\nindie_months = indie_dataset.drop_duplicates(\"name\").copy()\nindie_months = indie_months[indie_months['estimated_owners'] != \"0 - 20000\"]\nindie_months = indie_months[indie_months['estimated_owners'] != \"0 - 0\"]\nindie_months = indie_months[indie_months['price'] != 0]\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_prices = indie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each month, filtering for popular games\nnonindie_months = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_months = nonindie_months[nonindie_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_months = nonindie_months[nonindie_months['estimated_owners'] != \"0 - 0\"]\nnonindie_months = nonindie_months[nonindie_months['price'] != 0]\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_prices = nonindie_months[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(drawstyle=\"steps\", kind='line', figsize=(15,5))\nnonindie_prices.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Popular Indie vs Non-Indie games released per month, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nThe expected pattern now emerges, the prices of triple A games rising over time while indie games have stayed relatively the same. When smoothed out to average price per year rather than month.\n\n# Calculate date range of the data\ndataset_years = dataset.drop_duplicates(\"name\").release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_years.min(), end=dataset_years.max(), freq='Y')\n\n# Get average cost of indie games released each year\nindie_years = indie_dataset.drop_duplicates(\"name\").copy()\nindie_years = indie_years[indie_years['estimated_owners'] != \"0 - 20000\"]\nindie_years = indie_years[indie_years['estimated_owners'] != \"0 - 0\"]\nindie_years = indie_years[indie_years['price'] != 0]\nindie_years[\"release_date\"] = indie_years[\"release_date\"].dt.to_period('Y')\nindie_prices = indie_years[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Get average cost of non-indie games released each year\nnonindie_years = nonindie_dataset.drop_duplicates(\"name\").copy()\nnonindie_years = nonindie_years[nonindie_years['estimated_owners'] != \"0 - 20000\"]\nnonindie_years = nonindie_years[nonindie_years['estimated_owners'] != \"0 - 0\"]\nnonindie_years = nonindie_years[nonindie_years['price'] != 0]\nnonindie_years[\"release_date\"] = nonindie_years[\"release_date\"].dt.to_period('Y')\nnonindie_prices = nonindie_years[[\"price\", \"release_date\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_prices.plot(kind='line', figsize=(15,5))\nnonindie_prices.plot(kind='line', ax=ax, color='C1')\nax.set_ylim(0, 60)\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.legend(handles, labels)\nplt.title(\"Average Price of Popular Indie vs Non-Indie games released per year, free games removed\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Dollars\");\n\n\n\n\n\n\n\n\nThe divergence in prices is now very apparent. While indie games haven’t changed much in price, going from slightly below 10 dollars to slightly above, triple A games has been growing substantially. With a staring average cost of 10 dollars, the cost has grown to over double of that, ending at around 25 dollars. It confirms that yes, for the games that most player are playing, the average cost of triple A games has been growing over time. It is very likely that this trend will strong influence the general sentiment of a game (an average game could be interpreted as bad if its overpriced), thus this is an important trend to note going into review sentiment analysis.\n\n\nGenres\nThe last factor to look at is genre. While the splitting of genres for the purpose of sentiment analysis, this portion is for visualization of what genres are most common on Steam, as oversaturation of a genre may be a potential factor.\n\nimport networkx as nx\n\n\n# Get list of all tags\ngame_dataset = dataset.drop_duplicates(\"name\")\ntags = [x for xs in list(game_dataset.tags.map(lambda x : dict(x).keys())) for x in xs]\n\n\n# Mark the amount of times tags appear together\nimport itertools\nfrom tqdm import tqdm\n\ntagsSet = set(tags)\ntagsSet.add(\"Non-Indie\")\ntagConnections = {}\nfor tag in tagsSet:\n    tagConnections[tag] = {}\n    for tag2 in tagsSet:\n        tagConnections[tag][tag2] = 0\n    \nfor l in game_dataset.tags.map(lambda x : list(dict(x).keys())):\n    for perm in list(itertools.combinations(l,2)):\n        if perm[0] not in tagsSet or perm[1] not in tagsSet:\n            continue\n        tagConnections[perm[0]][perm[1]] += 1\n        tagConnections[perm[1]][perm[0]] += 1\n    if \"Indie\" not in l:\n        for item in l:\n            tagConnections[\"Non-Indie\"][item] += 1\n            tagConnections[item][\"Non-Indie\"] += 1\n    pass\n\nedgeMax = 0\nfor tag1 in tagsSet:\n    for tag2 in tagsSet:\n        edgeMax = max(tagConnections[tag1][tag2], edgeMax)\n\n\n# Get the number of times tags show up, then normalize the value\ntagsCount = {}\nfor item in tagsSet:\n    tagsCount[item] = 0\nfor tag in tags:\n    if tag not in tagsSet:\n        continue\n    tagsCount[tag] += 1\nmaxTagCount = max(tagsCount.values())\nfor item in tagsSet:\n    tagsCount[item] *= 1/maxTagCount\n\n\n# Graph tags related to indie games\n\ntagGraph = nx.Graph()\n\nnodeSize = 1000\ntagSizes = []\n\nedgeWeights = []\nedgeWidth = 2\ntag1 = \"Indie\"\nfor tag2 in tagsSet:\n    if tagConnections[tag1][tag2] &gt; 2000:\n        if not tagGraph.has_node(tag1):\n            tagGraph.add_node(tag1)\n            tagSizes.append(tagsCount[tag1] * nodeSize)\n        if not tagGraph.has_node(tag2):\n            tagGraph.add_node(tag2)\n            tagSizes.append(tagsCount[tag2] * nodeSize)\n        tagGraph.add_edge(tag1, tag2, weight=tagConnections[tag1][tag2] * edgeWidth / edgeMax)\n        edgeWeights.append(tagConnections[tag1][tag2] * edgeWidth / edgeMax)\n\nplt.figure(3,figsize=(12,12))\nnx.draw(tagGraph, node_size=tagSizes, with_labels = True,font_size=8,width=edgeWeights)\n\n\n\n\n\n\n\n\n\n# Graph tags not related to indie games\n\ntagGraph = nx.Graph()\n\nnodeSize = 1000\ntagSizes = []\n\nedgeWeights = []\nedgeWidth = 2\ntag1 = \"Non-Indie\"\nfor tag2 in tagsSet:\n    if tagConnections[tag1][tag2] &gt; 2000:\n        if not tagGraph.has_node(tag1):\n            tagGraph.add_node(tag1)\n            tagSizes.append(nodeSize)\n        if not tagGraph.has_node(tag2):\n            tagGraph.add_node(tag2)\n            tagSizes.append(tagsCount[tag2] * nodeSize)\n        tagGraph.add_edge(tag1, tag2, weight=tagConnections[tag1][tag2] * edgeWidth / edgeMax)\n        edgeWeights.append(tagConnections[tag1][tag2] * edgeWidth / edgeMax)\n\nplt.figure(3,figsize=(12,12))\nnx.draw(tagGraph, node_size=tagSizes, with_labels = True,font_size=8,width=edgeWeights)\n\n\n\n\n\n\n\n\nThe two graphs above show which tags a closely associated with indie games verses non-indie games. Unfortunately the graphs don’t reveal much, it seems that there isn’t a pattern to which genres are more indie and which genres are more triple A.\nIt can be assumed based on this information that genre saturation is likely not a major factor when comparing indie vs triple A games, and that the effects of it will affect both categories equally.\n\n\n\nIdentified Trends from Exploratory Analysis\nOverall two things can be concluded.\nFirst, the quantity of indie games significantly outweighs the number of triple A games on Steam, while also having a very heavy slant toward unpopular games. Keeping this in mind while doing sentiment analysis is extremely important, for the overabundance little known indie Steam games may significantly skew the end results of the sentiment analysis. A majority of these unpopular games are best described as “student projects”, inherently lacking in quality and therefore attracting only a couple reviews that are more likely than not to be negative. Filtering by popularity seems to be the best way to mitigate the imbalance in popularity, though this filtering should be noted when evaluating the results.\nSecond, overall changes in the cost in triple-A games has been rising steadily over time at a significant rate. There is a high chance that price will become more and more of a reason behind negative reviews for triple-A games, thus it’ll be something to look out for if a strong downward trend in triple-A game sentiment is revealed.\n\n\nPlayer Sentiment\nAn important note, while yes Steam gives average user ratings on their Steam page and totals the number of positive vs. negative reviews, reviews tend do have a lot more nuance then a binary recommend/not recommend. Some reviewers may be extremely mixed about a game but still slightly lean toward not, and vice versa. Hence sentiment analysis will be used to identify these nuances and get a better measure of how players feel about a game.\n\nReview Sentiment Scores\nThe below code takes in the dataset and preforms a sentiment analysis on the text of each review, then separates the dataset into indie games and non-indie games. Warning: Due to the sheer number of reviews in the data set (around 50 million after filtering), the following code takes a very long time to run. It took me around 8 hours to finish running the code (with a very well spec’d PC), even with swifter optimization (automatic vectorization, multithreading, etc.). The data processed is saved as a file so that the sentiment analysis doesn’t have to be run multiple times, however be prepared for this section to take a while.\n\nimport matplotlib.pyplot as plt\nimport nltk\n\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment import vader\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import opinion_lexicon\nfrom nltk.stem.porter import PorterStemmer\n\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('vader_lexicon')\nnltk.download('opinion_lexicon')\n\n[nltk_data] Downloading package punkt to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n[nltk_data] Downloading package opinion_lexicon to\n[nltk_data]     C:\\Users\\RSheep\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package opinion_lexicon is already up-to-date!\n\n\nTrue\n\n\n\nimport swifter\nimport tqdm as notebook_tqdm\n\n\nmy_file = Path(\"Data/sentiment.pkl\")\nif my_file.is_file():\n    sentiment_data = pd.read_pickle(\"Data/sentiment.pkl\")\nelse:\n    # Init sentiment analyzer\n    \n    engStopwords = stopwords.words('english')\n    sentimentAnalyzer = vader.SentimentIntensityAnalyzer()\n    \n    # Filter dataset for just reviews\n    \n    review_dataset = dataset[dataset[\"language\"] == \"english\"]\n    review_dataset = review_dataset[[\"game\", \"release_date\", \"review\"]]\n    \n    # Function that returns the sentiment score of a review\n    \n    def getSentiment(row):\n        try:\n            words = word_tokenize(row[\"review\"])\n        except Exception as e:\n            return pd.NA\n        score = 0\n        for w in words:\n            score += sentimentAnalyzer.polarity_scores(w)['compound']\n        return score\n    \n    # Generate sentiment scores for all the reviews in the dataset\n    # WARNING: THIS CODE TAKES AROUND 8 HOURS TO RUN\n    \n    sentiment_data = review_dataset.swifter.apply(getSentiment, axis=1)\n    \n    sentiment_data = pd.to_numeric(sentiment_data)\n    sentiment_data.to_pickle(\"Data/sentiment.pkl\")\n\n# Add sentiment data to dataset\nreview_dataset = dataset[dataset[\"language\"] == \"english\"].copy()\nreview_dataset[\"sentiment\"] = sentiment_data\n\n# Split into indie and non-indie\nreview_indie_dataset = review_dataset[review_dataset.genres.map(lambda x : \"Indie\" in x) | review_dataset.tags.map(lambda x : \"Indie\" in dict(x).keys())]\nreview_nonindie_dataset = review_dataset[review_dataset.genres.map(lambda x : \"Indie\" not in x) & review_dataset.tags.map(lambda x : \"Indie\" not in dict(x).keys())]\n\nC:\\Users\\RSheep\\.conda\\envs\\dh140\\Lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\nreview_indie_dataset\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\n...\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\nsentiment\n\n\n\n\n0\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n...\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nGalactic Bowling (aka Alien Monster Bowling Le...\n1673193813\n1\n2008\n10\n8.9050\n\n\n1\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n...\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nI bought this game despite all its flaws to pl...\n1643722668\n0\n2008\n10\n0.6232\n\n\n2\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n...\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nFun Game\n1499517402\n1\n2008\n10\n0.5106\n\n\n4\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n...\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\nMenu screen works fine. The game itself, howev...\n1451162716\n0\n2008\n10\n0.2023\n\n\n5\nGalactic Bowling\n2008-10-21\n0\n19.99\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\nGalactic Bowling is an exaggerated and stylize...\n[Casual, Indie, Sports]\n6\n11\n...\n0\n{'Indie': 22, 'Casual': 21, 'Sports': 21, 'Bow...\nGalactic Bowling\nenglish\ni wouldn't spend a dollar on this game\n1439894782\n0\n2008\n10\n0.0000\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n88467825\nTruth\n2024-01-07\n0\n0.0\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\nA horror game where you are in a hotel with an...\n[Adventure, Indie]\n0\n0\n...\n0\n[]\nTruth\nenglish\nIn Truth you play as the audience and get to c...\n1693284469\n1\n2024\n1\n6.0979\n\n\n88467826\nTruth\n2024-01-07\n0\n0.0\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\nA horror game where you are in a hotel with an...\n[Adventure, Indie]\n0\n0\n...\n0\n[]\nTruth\nenglish\nThis is the funniest game in quite some time! ...\n1693256609\n1\n2024\n1\n0.9280\n\n\n88467827\nTruth\n2024-01-07\n0\n0.0\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\nA horror game where you are in a hotel with an...\n[Adventure, Indie]\n0\n0\n...\n0\n[]\nTruth\nenglish\nI just finished my first try. My last 3 picks ...\n1693225818\n0\n2024\n1\n4.2467\n\n\n88467828\nTruth\n2024-01-07\n0\n0.0\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\n(HEADPHONES EXTREAMLY SUGGESTED) Truth is a 3D...\nA horror game where you are in a hotel with an...\n[Adventure, Indie]\n0\n0\n...\n0\n[]\nTruth\nenglish\nmeh\n1693189393\n0\n2024\n1\n-0.0772\n\n\n88467920\nGlimpse\n2024-01-06\n0\n2.39\n'Glimpse' takes you on a journey through the m...\n'Glimpse' takes you on a journey through the m...\n'Glimpse' is a single-player atmospheric horro...\n[Indie]\n0\n0\n...\n0\n[]\nGlimpse\nenglish\n10/10. Does exactly what it's supposed to do. ...\n1560659833\n1\n2024\n1\n0.7889\n\n\n\n\n21655463 rows × 21 columns\n\n\n\n\nreview_nonindie_dataset.head()\n\n\n\n\n\n\n\n\nname\nrelease_date\nrequired_age\nprice\ndetailed_description\nabout_the_game\nshort_description\ngenres\npositive\nnegative\n...\naverage_playtime_forever\ntags\ngame\nlanguage\nreview\ntimestamp_created\nvoted_up\nrelease_year\nrelease_month\nsentiment\n\n\n\n\n141\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nFun game but with a bit of pay to win\n1698161278\n1\n2021\n2\n0.9938\n\n\n143\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nIs antistres, and the best game of all!\n1697979320\n1\n2021\n2\n0.6369\n\n\n145\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\na blast from the past 9 years ago to be exact\n1697283258\n1\n2021\n2\n0.0000\n\n\n146\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nPay to win slow load..trash game\n1695433549\n0\n2021\n2\n0.4832\n\n\n151\nWartune Reborn\n2021-02-26\n0\n0.0\nFeel tired of auto-fight? Feel tired of boring...\nFeel tired of auto-fight? Feel tired of boring...\n'Wartune Reborn' epic magic TBS game was devel...\n[Adventure, Casual, Free to Play, Massively Mu...\n87\n49\n...\n0\n{'Turn-Based Combat': 292, 'Massively Multipla...\nWartune Reborn\nenglish\nI live this game\n1692061364\n1\n2021\n2\n0.0000\n\n\n\n\n5 rows × 21 columns"
  },
  {
    "objectID": "SteamAnalysis.html#results",
    "href": "SteamAnalysis.html#results",
    "title": "Indie Vs Triple A",
    "section": "Results",
    "text": "Results\n\nSentiment Data vs. Games Per Month\nThis section will be dedicated to analyzing the changes in sentiment over time with respect to the games that were released per month. The same techniques used to analyze the quantity of games released per month will be used here to analyze and account for game popularity and the quantity of games when doing sentiment analysis.\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_months = review_indie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_months = review_nonindie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_months = review_indie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nindie_months[\"release_date\"] = indie_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_months = review_nonindie_dataset[[\"release_date\", \"sentiment\", \"game\"]].copy().groupby(\"game\").mean()\nnonindie_months[\"release_date\"] = nonindie_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 20000\"]\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Popular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 20000\"]\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'] != \"0 - 0\"]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 20000\"]\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'] != \"0 - 0\"]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Popular Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Unpopular Indie vs Non-Indie games released per month\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('Y')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='Y')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('Y')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['estimated_owners'].isin([\"0 - 0\", \"0 - 20000\"])]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('Y')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Graph data\nax = indie_sentiment.plot(kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Unpopular Indie vs Non-Indie games released per year\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\nExamining general game sentiment over time it seems that there is not only no difference between the sentiment scores of Indie vs. Triple A games, but also no major fluctuation of sentiment scores over time either. This holds true even if the data is filtered for popular games (games with &gt;20000 owners) and unpopular games. The data shows that time and popularity have no overall impact on the sentiment scores of games.\nThus to answer the questions at the beginning of the project, no, sentiment toward both indie games and triple A games have not changed over time, and as a result indie games have not surpassed triple A games in player sentiment.\nDiscussion on why this might be the case will be expanded upon in the discussion sections.\n\n\nSentiment Data vs. Games Per Month vs. Cost\nWhile time itself may not have affected sentiments, what about when its separated by costs?\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'] == 0]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'] == 0]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, $0\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(0, 10, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(0, 10, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$0-\\$10\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(10, 30, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(10, 30, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$10-\\$30\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'].between(30, 60, inclusive=\"right\")]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'].between(30, 60, inclusive=\"right\")]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, \\$30-\\$60\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\n\n# Calculate date range of the data\ndataset_months = review_dataset.release_date.dt.to_period('M')\ndate_range = pd.period_range(start=dataset_months.min(), end=dataset_months.max(), freq='M')\n\n# Get average cost of indie games released each month\nindie_pop_months = review_indie_dataset.copy()\nindie_pop_months = indie_pop_months[indie_pop_months['price'] &gt; 60]\nindie_pop_months = indie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nindie_pop_months[\"release_date\"] = indie_pop_months[\"release_date\"].dt.to_period('M')\nindie_sentiment = indie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# Get average cost of non-indie games released each month\nnonindie_pop_months = review_nonindie_dataset.copy()\nnonindie_pop_months = nonindie_pop_months[nonindie_pop_months['price'] &gt; 60]\nnonindie_pop_months = nonindie_pop_months[[\"release_date\", \"sentiment\", \"game\"]].groupby(\"game\").mean()\nnonindie_pop_months[\"release_date\"] = nonindie_pop_months[\"release_date\"].dt.to_period('M')\nnonindie_sentiment = nonindie_pop_months[[\"release_date\", \"sentiment\"]].groupby(\"release_date\").mean().reindex(date_range, fill_value=0).sort_index()\n\n# # Graph data\nax = indie_sentiment.plot(drawstyle=\"steps\", kind='line', figsize=(15,5), label=\"Indie\")\nnonindie_sentiment.plot(drawstyle=\"steps\", kind='line', ax=ax, color='C1', label=\"Non-Indie\")\nax.set_ylim(-4, 4)\nhandles, labels = ax.get_legend_handles_labels()\nlabels = [\"Indie\", \"Non-Indie\"]\nplt.axhline(y=0, color='black', linewidth=0.5)\nplt.legend(handles, labels)\nplt.title(\"Average Sentiment of Indie vs Non-Indie games released per month, &gt;$60\")\nplt.xlabel(\"Release Date\")\nplt.ylabel(\"Sentiment Score\");\n\n\n\n\n\n\n\n\nThe data again reveals that there isn’t a major difference between player sentiment when comparing Indie vs Non-Indie games, nor has sentiment changed over time. One interesting aspect to note however is the fact that around the \\$30 to \\$60 range is when sentiment over games starts to become highly variable, with indie games having a much higher sentiment variability than Non-Indie games do. There are various reasons that this could be the case, which will be discussed in the discussion section."
  },
  {
    "objectID": "SteamAnalysis.html#discussion",
    "href": "SteamAnalysis.html#discussion",
    "title": "Indie Vs Triple A",
    "section": "Discussion",
    "text": "Discussion\nAs shown by the sentiment analysis graphs, sentiment toward both indie games and triple-A games do not differ arguably at all. No matter how you slice it, the data always reveals that games of both categories have the same average sentiment, whether you look at high cost games, low cost games, popular or not. It is strong evidence that despite how much emphasis is put on the divide between “Indie” vs “Triple-A” games, when it comes down to it the distinction is not an important contributing factor to average player sentiment. There could be multiple reasons why this could be the case.\nOne theory is that people genuinely do not care about whether the game is indie or not, for other factors influence their sentiment to a greater degree than how many people made the game they’re playing. Such a theory would make sense, why would a good game be any better if one person made it versus 100 people? Would a bad game be alright if a single person made it? Players will inevitably focus more on the gameplay, art, music, etc. of a game, thus knowing it was made by a large or small team won’t override their perception of the game.\nAnother theory is that the opposing views may just cancel each other out. It is undeniable that some people are willing to cut indie games more slack when it comes to bugs and quality issues as they are aware that the lack of resources will inherently lead to more mistakes slipping through the cracks. On the side of the argument, there are also players out there that view indie games as inherently lesser than anything triple A can create. Indie developers simply won’t have the resources, so it’ll inherently lack the high fidelity graphics and realism that some communities believe is a must have. Theses opposing view may cancel each other out, leading to a middling sentiment when reviews are considered as a whole. A piece of evidence that backs this viewpoint up is the 30 dollar to 60 dollar sentiment graph. Its not surprising to learn that the most expensive something is, the stronger opinions people will have about it to either justify their purchase or express anger over being ripped off. What is interesting is how much more variability indie games have compared the their triple-A counterparts. Typically the 30 dollar to 60 dollar range is where most gamers will deem a game to be asking for a premium price, not overly expensive but also pricey enough where they expect a certain degree of quality. Its a mindset carried over from the pricing structure of console games, who have a fixed $60 price tag (as of now) for all first-party games. Thus, going with the opposing views theory, the higher variability may indicate the point where the excuse “well its just an indie game” for mediocre no longer holds due to the high asking price. Thus, it divides indie games into two camps, games that are deemed worthy of price and games that are absolutely not. Confirmation bias then kicks in when reviewers consider the fact that the game is an indie game, i.e. “This game is so good, and its made by one person. Of course its worth purchasing” or “This game is terrible, its made by a single greedy dev who wants to steal your money.”\nThe overall takeaway from this project though is that despite countless buzzwords about indie vs triple A in the gaming community, there really isn’t any general statement to be made about the quality of “indie games as a whole” or “triple A games as a whole”. The games within each category vary too significantly to make a blanket statement the category as a whole. Thus going forward, its best to be cautious of any source that claims anything about either category as a whole, as what they say may sat more about them than the games they’re talking about."
  }
]